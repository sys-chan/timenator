import { UserParams } from "../../types";
import { Conversation, ConversationFlavor, conversations, createConversation } from "@grammyjs/conversations";
import { findUser, setUserSetupData } from "../services/userService";
import { Composer, Context, InlineKeyboard } from "grammy";
import db from "../../db";
import { scheduleUserReports } from "../../utils/sheduler";

const confirmKb = new InlineKeyboard()
    .text("–û–ö", "true")
    .row()
    .text("–û—Ç–º–µ–Ω–∞", "false");

const genderKb = new InlineKeyboard()
    .text("–ú—É–∂—Å–∫–æ–π", "gender:male")
    .row()
    .text("–ñ–µ–Ω—Å–∫–∏–π", "gender:female");

const addressingKb = new InlineKeyboard()
    .text("–§–æ—Ä–º–∞–ª—å–Ω–∞—è (–Ω–∞ –í—ã)", "addressing:formal")
    .row()
    .text("–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–∞—è (–Ω–∞ –¢—ã)", "addressing:informal");

const dialog = new Composer<ConversationFlavor<Context>>();

dialog.use(conversations());

dialog.callbackQuery("cancel", async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.exitAll();
});

dialog.command("cancel", async (ctx) => {
    await ctx.conversation.exitAll();
});

async function setupConversation(conversation: Conversation, ctx: Context) {
    const user = await findUser(db, ctx.from?.id!);
    let data: UserParams = {
        persona: user?.params?.persona || "timenator",
    };

    // –ò–º—è
    const nameCheckpoint = conversation.checkpoint();
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è\n\n_\\(—Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω\\)_", {
        parse_mode: "MarkdownV2",
    });
    data.name = await conversation.form.text();
    await ctx.reply(`–ë–æ—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ –∏–º–µ–Ω–∏ ¬´${data.name}¬ª`, {
        reply_markup: confirmKb
    });
    const nameConfirmCtx = await conversation.waitForCallbackQuery(/(true|false)/);
    await nameConfirmCtx.answerCallbackQuery();
    if (nameConfirmCtx.callbackQuery.data === "false") {
        await conversation.rewind(nameCheckpoint);
    }

    // –ü–æ–ª
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª", {
        reply_markup: genderKb
    });
    const genderCtx = await conversation.waitForCallbackQuery(/gender:(male|female)/);
    await genderCtx.answerCallbackQuery();
    data.gender = genderCtx.callbackQuery.data.split(":")[1] as "male" | "female";

    // –§–æ—Ä–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—â–µ–Ω–∏—è", {
        reply_markup: addressingKb
    });
    const addressingCtx = await conversation.waitForCallbackQuery(/addressing:\w+/);
    await addressingCtx.answerCallbackQuery();
    data.addressing = addressingCtx.callbackQuery.data.split(':')[1] || undefined;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—á—ë—Ç–æ–≤
    const reportTimeCheckpoint = conversation.checkpoint();

    // –£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤ UTC\n\n_\\(—Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm, –Ω–∞–ø—Ä–∏–º–µ—Ä, 03:30 ‚Äì –ú–°–ö 08:30\\)_", {
        parse_mode: "MarkdownV2",
    });
    const morningReportTimeCheckpoint = conversation.checkpoint();
    const inputMorningReportTime = (await conversation.form.text()).trim();
    if (!checkTime(inputMorningReportTime)) {
        await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm\n\n_\\(–Ω–∞–ø—Ä–∏–º–µ—Ä, 03:30\\)_", {
            parse_mode: "MarkdownV2",
        });
        await conversation.rewind(morningReportTimeCheckpoint);
    }
    data.morningReportTime = inputMorningReportTime;

    // –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤ UTC\n\n_\\(—Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm, –Ω–∞–ø—Ä–∏–º–µ—Ä, 13:30 ‚Äì –ú–°–ö 18:30\\)_", {
        parse_mode: "MarkdownV2",
    });
    const eveningReportTimeCheckpoint = conversation.checkpoint();
    const inputEveningReportTime = (await conversation.form.text());
    if (!checkTime(inputEveningReportTime)) {
        await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm\n\n_\\(–Ω–∞–ø—Ä–∏–º–µ—Ä, 13:30\\)_", {
            parse_mode: "MarkdownV2",
        });
        await conversation.rewind(eveningReportTimeCheckpoint);
    }
    data.eveningReportTime = inputEveningReportTime;

    await ctx.reply(`üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç –ø—Ä–∏–¥—ë—Ç –≤ ${data.morningReportTime}\n\nüåá –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç –ø—Ä–∏–¥—ë—Ç –≤ ${data.eveningReportTime}\n\n_\\(–≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –¥–ª—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ UTC\\)_`, {
        reply_markup: confirmKb,
        parse_mode: "MarkdownV2",
    });
    const timeConfirmCtx = await conversation.waitForCallbackQuery(/(true|false)/);
    await timeConfirmCtx.answerCallbackQuery();
    if (timeConfirmCtx.callbackQuery.data === "false") {
        await conversation.rewind(reportTimeCheckpoint);
    }

    scheduleUserReports(ctx.from?.id!, inputMorningReportTime, inputEveningReportTime);

    await ctx.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –∏—Ö –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ /settings");
    console.log(await setUserSetupData(db, ctx.from?.id!, data));
}
dialog.use(createConversation(setupConversation));

dialog.callbackQuery("setup", async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("setupConversation");
});

dialog.command("setup", async (ctx) => {
    await ctx.conversation.enter("setupConversation");
});

function checkTime(inputTime: string) {
    const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
    return timeRegex.test(inputTime);
}

export default dialog;